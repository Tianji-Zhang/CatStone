function Solution = NRsolver(n_var, n_cell, n_dim,n_BC,dt,t)
%A Solver Test
%   Should be automatically generated by Scheme

%% Define variables & Functions
n_eqn = n_var;
cell_index_list = 1:n_cell;
dim_index_list = 1:(n_dim*2);
var_index_list = 1:n_var;
eqn_index_list = 1:n_eqn;
BC_list = 1:n_BC;

var_table = zeros(n_var, n_cell);
var_1D_index = @(cell_index, var_i) (cell_index * var_i);

adj_cell_table = zeros(n_cell, 2 * n_dim + 1);
adj_cell_table(:,end) = cell_index_list';
adj_cell_index = @(cell_index ,dim_i) adj_cell_table(cell_index,dim_i);
% inner_cell_index = @(dim_i) find(adj_cell_table(:,dim_i) ~= -1);
% bound_cell_index = @(dim_i) find(adj_cell_table(:,dim_i) == -1);

dvar_table = zeros(n_var, n_cell);
dvar_1D_index = var_1D_index;

R_table = zeros(n_var, n_cell);
R_1D_index = var_1D_index;

Jacob_mat = zeros(n_var^2 * n_cell);
% index map to jacobian matrix, row: cell(eqns), col: cell(vars)
Jacob_1D_adj_index = @(cell_index,dim_i)(n_eqn*n_var*n_cell)*(adj_cell_index(cell_index,dim_i)-1);
Jacob_1D_adjvar_index = @(var_i)(n_eqn*n_var)*(var_i-1);
Jacob_1D_cell_index = @(cell_index)n_eqn*(cell_index-1);
Jacob_1D_celleqn_index = @(eqn_i)eqn_i;
Jacob_1D_index_mat = @(cell_index, dim_i, var_i, eqn_i) Jacob_1D_adj_index(cell_index, dim_i) + Jacob_1D_adjvar_index(var_i) + Jacob_1D_cell_index(cell_index) + Jacob_1D_celleqn_index(eqn_i);

%Note: 
%1. dim_i = n_dim + 1 when it refers to cell center;
%2. cell_index is an array, but only get a part of the center cells;





  
  

%% Initialization
time = 0;



dvar_table(:) = 1;
tolerance = 1e-4;


%% Main loop
max_dx = @(dx, x) max(abs(dx ./ x));
while time <= t
    
    
    while max_dx(dvar_table,var_table) <= tolerance
        R_table(:) = 0;
        dvar_table(:) = 0;
        Jacob_mat(:) = 0; 
        for i_BC = n_BC
            for i_eqn = eqn_index_list
                for i_dim = dim_index_list
                    
                end
            end
        end
    end
    
    time = time + dt;
end

Solution = 1;

end

